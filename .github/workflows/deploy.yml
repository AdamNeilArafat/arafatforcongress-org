# 1) Overwrite the workflow with AI delta + compact steps
cat > .github/workflows/deploy.yml <<'YAML'
name: Deploy GitHub Pages

on:
  push:
    branches: [ main ]
    paths:
      - '**/*'
  workflow_dispatch: {}

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      - name: Build chart-ready data (no-op if unchanged)
        env:
          FEC_API_KEY: ${{ secrets.FEC_API_KEY }}
        run: npm run fec:site

      - name: AI analysis (incremental; non-blocking)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AI_MAX_ITEMS: 0               # analyze all
          AI_DISABLED: ${{ secrets.AI_DISABLED }}  # optional kill switch
        run: npm run ai:analyze:delta
        continue-on-error: true

      - name: Compact AI outputs (optional; non-blocking)
        run: npm run ai:compact || true

      - name: Assemble static site
        run: |
          mkdir -p _site
          rsync -a --delete ./ _site/ \
            --exclude '_site' \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude '.github' \
            --exclude 'scripts' \
            --exclude 'config' \
            --exclude 'package*.json'

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
YAML

# 2) Add a tiny compact script (sort + dedupe by id; stable keys)
mkdir -p scripts/ai
cat > scripts/ai/compact.mjs <<'JS'
import fs from "node:fs/promises";

const files = [
  "data/ai/committee_analyses.json",
  "data/ai/candidate_analyses.json",
];

function asMapById(arr, idKey) {
  const m = new Map();
  for (const x of arr || []) if (x && x[idKey]) m.set(x[idKey], x);
  return m;
}

function stableSortKeys(obj) {
  if (Array.isArray(obj)) return obj.map(stableSortKeys);
  if (obj && typeof obj === "object") {
    const out = {};
    Object.keys(obj).sort().forEach(k => { out[k] = stableSortKeys(obj[k]); });
    return out;
  }
  return obj;
}

async function compactOne(path, idKey) {
  try {
    const s = await fs.readFile(path, "utf8");
    const arr = JSON.parse(s);
    const map = asMapById(arr, idKey);
    const deduped = Array.from(map.values())
      .sort((a,b) => String(a[idKey]).localeCompare(String(b[idKey])));
    const stable = deduped.map(stableSortKeys);
    await fs.writeFile(path, JSON.stringify(stable, null, 2));
    console.log(`Compacted ${path}: ${arr.length} -> ${stable.length}`);
  } catch (e) {
    // ok if file missing
  }
}

await compactOne(files[0], "committee_id");
await compactOne(files[1], "candidate_id");
JS

# 3) Wire npm script for compact
node - <<'NODE'
import fs from "node:fs";
const f="package.json";
const pkg=JSON.parse(fs.readFileSync(f,"utf8"));
pkg.scripts ||= {};
pkg.scripts["ai:compact"] = "node scripts/ai/compact.mjs";
fs.writeFileSync(f, JSON.stringify(pkg,null,2));
console.log("OK: package.json updated (ai:compact)");
NODE

# 4) Commit and push the workflow + script changes
git add .github/workflows/deploy.yml scripts/ai/compact.mjs package.json
git commit -m "ci: add AI incremental analysis (non-blocking) + compact step"
git push origin main
