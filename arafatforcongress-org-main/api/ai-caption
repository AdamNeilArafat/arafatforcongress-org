// wrangler.toml snippet
// [[routes]]
// pattern = "arafatforcongress.org/api/ai-caption"
// zone_name = "arafatforcongress.org"
// usage model: standard

export default {
  async fetch(request, env) {
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { status: 405 });
    }
    let payload;
    try { payload = await request.json(); }
    catch { return new Response(JSON.stringify({ error: 'Bad JSON' }), { status: 400 }); }

    const {
      name, seat, party, pac_pct, small_pct,
      in_state_dollars, out_state_dollars,
      top_industry, top_industry_share, donor_align_pct, badges = []
    } = payload || {};

    const summary = [
      `${name || 'This member'} — ${seat || ''}${party ? ` (${party})` : ''}`.trim(),
      `PAC ${Math.round((pac_pct||0)*100)}% • Small ${Math.round((small_pct||0)*100)}%`,
      (typeof top_industry === 'string' && top_industry !== '—')
        ? `Top: ${top_industry} (${Math.round((top_industry_share||0)*100)}%)` : null,
      (typeof donor_align_pct === 'number')
        ? `Donor-align votes: ${Math.round(donor_align_pct*100)}%` : null,
      (Array.isArray(badges) && badges.length) ? `Badges: ${badges.slice(0,3).join(', ')}` : null,
      `In: $${(in_state_dollars||0).toLocaleString()} • Out: $${(out_state_dollars||0).toLocaleString()}`
    ].filter(Boolean).join(' | ');

    const system = `You write 1–2 sentence, punchy, non-defamatory captions for social posts about campaign finance. Be factual and neutral in tone with a sharp edge; avoid accusations. Include a single relevant hashtag like #EvergreenPact or #FollowTheMoney.`;
    const user = `Make a short caption (max 240 chars) summarizing:
${summary}`;

    // OpenAI responses (JSON)
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${env.OPENAI_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: system },
          { role: "user", content: user }
        ],
        temperature: 0.5,
        max_tokens: 120
      })
    });

    if (!resp.ok) {
      const txt = await resp.text().catch(()=> '');
      return new Response(JSON.stringify({ error: `OpenAI ${resp.status}`, detail: txt.slice(0,400) }), { status: 502 });
    }
    const data = await resp.json();
    const caption = data?.choices?.[0]?.message?.content?.trim() || summary + ' #EvergreenPact';
    return new Response(JSON.stringify({ caption }), { headers: { "Content-Type": "application/json" } });
  }
};
